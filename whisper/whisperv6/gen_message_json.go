// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package whisperv6

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*messageOverride)(nil)

func (a APIMessage) MarshalJSON() ([]byte, error) {
	type APIMessage struct {
		Sig       hexutil.Bytes `json:"sig,omitempty"`
		TTL       uint32        `json:"ttl"`
		Timestamp uint32        `json:"timestamp"`
		Topic     TopicType     `json:"topic"`
		Payload   hexutil.Bytes `json:"payload"`
		Padding   hexutil.Bytes `json:"padding"`
		PoW       float64       `json:"pow"`
		Hash      hexutil.Bytes `json:"hash"`
		Dst       hexutil.Bytes `json:"recipientPublicKey,omitempty"`
	}
	var enc APIMessage
	enc.Sig = a.Sig
	enc.TTL = a.TTL
	enc.Timestamp = a.Timestamp
	enc.Topic = a.Topic
	enc.Payload = a.Payload
	enc.Padding = a.Padding
	enc.PoW = a.PoW
	enc.Hash = a.Hash
	enc.Dst = a.Dst
	return json.Marshal(&enc)
}

func (a *APIMessage) UnmarshalJSON(input []byte) error {
	type APIMessage struct {
		Sig       hexutil.Bytes `json:"sig,omitempty"`
		TTL       *uint32       `json:"ttl"`
		Timestamp *uint32       `json:"timestamp"`
		Topic     *TopicType    `json:"topic"`
		Payload   hexutil.Bytes `json:"payload"`
		Padding   hexutil.Bytes `json:"padding"`
		PoW       *float64      `json:"pow"`
		Hash      hexutil.Bytes `json:"hash"`
		Dst       hexutil.Bytes `json:"recipientPublicKey,omitempty"`
	}
	var dec APIMessage
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Sig != nil {
		a.Sig = dec.Sig
	}
	if dec.TTL != nil {
		a.TTL = *dec.TTL
	}
	if dec.Timestamp != nil {
		a.Timestamp = *dec.Timestamp
	}
	if dec.Topic != nil {
		a.Topic = *dec.Topic
	}
	if dec.Payload != nil {
		a.Payload = dec.Payload
	}
	if dec.Padding != nil {
		a.Padding = dec.Padding
	}
	if dec.PoW != nil {
		a.PoW = *dec.PoW
	}
	if dec.Hash != nil {
		a.Hash = dec.Hash
	}
	if dec.Dst != nil {
		a.Dst = dec.Dst
	}
	return nil
}
